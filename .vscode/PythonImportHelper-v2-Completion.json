[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "yt_dlp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yt_dlp",
        "description": "yt_dlp",
        "detail": "yt_dlp",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "YoutubeSearch",
        "importPath": "youtube_search",
        "description": "youtube_search",
        "isExtraImport": true,
        "detail": "youtube_search",
        "documentation": {}
    },
    {
        "label": "Deta",
        "importPath": "deta",
        "description": "deta",
        "isExtraImport": true,
        "detail": "deta",
        "documentation": {}
    },
    {
        "label": "DetaObj",
        "kind": 6,
        "importPath": "api.main",
        "description": "api.main",
        "peekOfCode": "class DetaObj:\n    def __init__(self):\n        self.deta = Deta(os.environ[\"DETA_KEY\"])\n    def albums(self):\n        return self.deta.Base(\"albums\")\n    def album(self, album_name):\n        if album_name == \"web-music\":\n            return self.deta.Base(\"web-music\")\n        for i in self.albums().fetch().items:\n            if i[\"name\"] == album_name:",
        "detail": "api.main",
        "documentation": {}
    },
    {
        "label": "music",
        "kind": 2,
        "importPath": "api.main",
        "description": "api.main",
        "peekOfCode": "def music(video_url):\n    ydl_opts = {\"format\": \"bestaudio/best\"}\n    with yt_dlp.YoutubeDL(ydl_opts) as ydl:\n        info_dict = ydl.extract_info(video_url, download=False)\n        return info_dict\ndef save_music(info, album):\n    deta = DetaObj()\n    db = deta.album(album)\n    drive = deta.drive()\n    content = {",
        "detail": "api.main",
        "documentation": {}
    },
    {
        "label": "save_music",
        "kind": 2,
        "importPath": "api.main",
        "description": "api.main",
        "peekOfCode": "def save_music(info, album):\n    deta = DetaObj()\n    db = deta.album(album)\n    drive = deta.drive()\n    content = {\n        \"key\": info[\"title\"] + \".mp3\",\n        \"name\": info[\"title\"],\n        \"cover\": info.get(\"thumbnail\"),\n        \"artist\": info.get(\"channel\"),\n    }",
        "detail": "api.main",
        "documentation": {}
    },
    {
        "label": "ytsearch",
        "kind": 2,
        "importPath": "api.main",
        "description": "api.main",
        "peekOfCode": "def ytsearch(kw: str):\n    results = YoutubeSearch(kw, max_results=5).to_json()\n    return json.loads(results)\n@app.route(\"/\")\ndef home():\n    return jsonify(page=\"home\")\n@app.route(\"/search\")\ndef yt_search():\n    keyword = request.args.get(\"kw\")\n    if keyword:",
        "detail": "api.main",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "api.main",
        "description": "api.main",
        "peekOfCode": "def home():\n    return jsonify(page=\"home\")\n@app.route(\"/search\")\ndef yt_search():\n    keyword = request.args.get(\"kw\")\n    if keyword:\n        return jsonify(ytsearch(keyword))\n    return jsonify(\n        status=\"error\", message=\"no keyword to search\", resolved=False, status_code=404\n    )",
        "detail": "api.main",
        "documentation": {}
    },
    {
        "label": "yt_search",
        "kind": 2,
        "importPath": "api.main",
        "description": "api.main",
        "peekOfCode": "def yt_search():\n    keyword = request.args.get(\"kw\")\n    if keyword:\n        return jsonify(ytsearch(keyword))\n    return jsonify(\n        status=\"error\", message=\"no keyword to search\", resolved=False, status_code=404\n    )\n@app.route(\"/get\")\ndef get_music():\n    url = request.args.get(\"url\")",
        "detail": "api.main",
        "documentation": {}
    },
    {
        "label": "get_music",
        "kind": 2,
        "importPath": "api.main",
        "description": "api.main",
        "peekOfCode": "def get_music():\n    url = request.args.get(\"url\")\n    album = request.args.get(\"a\")\n    info = music(url)\n    save_music(info, album)\n    return jsonify(key=info[\"title\"] + \".mp3\")\n@app.route(\"/list\")\ndef get_album():\n    deta = DetaObj()\n    album = request.args.get(\"a\")",
        "detail": "api.main",
        "documentation": {}
    },
    {
        "label": "get_album",
        "kind": 2,
        "importPath": "api.main",
        "description": "api.main",
        "peekOfCode": "def get_album():\n    deta = DetaObj()\n    album = request.args.get(\"a\")\n    if album:\n        db = deta.album(album)\n        result = db.fetch().items\n        return jsonify(result)\n    db = deta.albums()\n    result = db.fetch().items\n    return jsonify(result)",
        "detail": "api.main",
        "documentation": {}
    },
    {
        "label": "add_album",
        "kind": 2,
        "importPath": "api.main",
        "description": "api.main",
        "peekOfCode": "def add_album():\n    album = request.args.get(\"a\")\n    if album:\n        deta = DetaObj()\n        db = deta.albums()\n        album = db.put(data={\"name\": album})\n        return jsonify(\n            status=\"success\", action=\"add\", key=album[\"key\"], name=album[\"name\"]\n        )\n    return jsonify(status=\"error\", action=\"add\")",
        "detail": "api.main",
        "documentation": {}
    },
    {
        "label": "delete_music",
        "kind": 2,
        "importPath": "api.main",
        "description": "api.main",
        "peekOfCode": "def delete_music():\n    album = request.args.get(\"a\")\n    deta = DetaObj()\n    db = deta.album(album)\n    key = request.args.get(\"key\")\n    db.delete(key)\n    return jsonify(key=key, status=\"success\", action=\"delete\")\n@app.route(\"/comments\")\ndef get_comments():\n    deta = Deta(os.environ[\"DETA_KEY\"])",
        "detail": "api.main",
        "documentation": {}
    },
    {
        "label": "get_comments",
        "kind": 2,
        "importPath": "api.main",
        "description": "api.main",
        "peekOfCode": "def get_comments():\n    deta = Deta(os.environ[\"DETA_KEY\"])\n    db = deta.Base(\"comments\")\n    result = db.fetch().items\n    return jsonify(result)",
        "detail": "api.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "api.main",
        "description": "api.main",
        "peekOfCode": "app = Flask(__name__)\nCORS(app)\ndef music(video_url):\n    ydl_opts = {\"format\": \"bestaudio/best\"}\n    with yt_dlp.YoutubeDL(ydl_opts) as ydl:\n        info_dict = ydl.extract_info(video_url, download=False)\n        return info_dict\ndef save_music(info, album):\n    deta = DetaObj()\n    db = deta.album(album)",
        "detail": "api.main",
        "documentation": {}
    }
]