[
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "yt_dlp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yt_dlp",
        "description": "yt_dlp",
        "detail": "yt_dlp",
        "documentation": {}
    },
    {
        "label": "YoutubeSearch",
        "importPath": "youtube_search",
        "description": "youtube_search",
        "isExtraImport": true,
        "detail": "youtube_search",
        "documentation": {}
    },
    {
        "label": "YoutubeSearch",
        "importPath": "youtube_search",
        "description": "youtube_search",
        "isExtraImport": true,
        "detail": "youtube_search",
        "documentation": {}
    },
    {
        "label": "YoutubeSearch",
        "importPath": "youtube_search",
        "description": "youtube_search",
        "isExtraImport": true,
        "detail": "youtube_search",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "Deta",
        "importPath": "deta",
        "description": "deta",
        "isExtraImport": true,
        "detail": "deta",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "music",
        "kind": 2,
        "importPath": "src.appwrite.main",
        "description": "src.appwrite.main",
        "peekOfCode": "def music(video_url):\n    ydl_opts = {\"format\": \"bestaudio/best\"}\n    with yt_dlp.YoutubeDL(ydl_opts) as ydl:\n        info_dict = ydl.extract_info(video_url, download=False)\n        return info_dict\ndef ytsearch(kw):\n    results = YoutubeSearch(kw, max_results=5).to_json()\n    return json.loads(results)\ndef main(ctx):\n    action = ctx.req.query.get(\"action\")",
        "detail": "src.appwrite.main",
        "documentation": {}
    },
    {
        "label": "ytsearch",
        "kind": 2,
        "importPath": "src.appwrite.main",
        "description": "src.appwrite.main",
        "peekOfCode": "def ytsearch(kw):\n    results = YoutubeSearch(kw, max_results=5).to_json()\n    return json.loads(results)\ndef main(ctx):\n    action = ctx.req.query.get(\"action\")\n    if action == \"search\":\n        kw = ctx.req.query.get(\"kw\")\n        result = ytsearch(ctx.req.query(kw))\n        return ctx.res.json(result)\n    elif action == \"music\":",
        "detail": "src.appwrite.main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.appwrite.main",
        "description": "src.appwrite.main",
        "peekOfCode": "def main(ctx):\n    action = ctx.req.query.get(\"action\")\n    if action == \"search\":\n        kw = ctx.req.query.get(\"kw\")\n        result = ytsearch(ctx.req.query(kw))\n        return ctx.res.json(result)\n    elif action == \"music\":\n        url = ctx.req.query.get(\"url\")\n        info = music(url)\n        return ctx.res.json(",
        "detail": "src.appwrite.main",
        "documentation": {}
    },
    {
        "label": "Song",
        "kind": 6,
        "importPath": "src.server.main",
        "description": "src.server.main",
        "peekOfCode": "class Song(BaseModel):\n    key: str\n    name: str\n    artist: str\n    url: str\n    cover: str\nclass File(BaseModel):\n    name: str\n    data: bytes\ndeta = Deta(\"c0kEEGmHJte_YjH9AKDzdmP4tm6Zyge3Fme9KyMRNwXB\")",
        "detail": "src.server.main",
        "documentation": {}
    },
    {
        "label": "File",
        "kind": 6,
        "importPath": "src.server.main",
        "description": "src.server.main",
        "peekOfCode": "class File(BaseModel):\n    name: str\n    data: bytes\ndeta = Deta(\"c0kEEGmHJte_YjH9AKDzdmP4tm6Zyge3Fme9KyMRNwXB\")\ndb = deta.Base(\"web-music\")\ndrive = deta.Drive(\"web-music\")\napp = Flask(__name__)\nCORS(app)\ndef music(video_url):\n    ydl_opts = {\"format\": \"bestaudio/best\"}",
        "detail": "src.server.main",
        "documentation": {}
    },
    {
        "label": "music",
        "kind": 2,
        "importPath": "src.server.main",
        "description": "src.server.main",
        "peekOfCode": "def music(video_url):\n    ydl_opts = {\"format\": \"bestaudio/best\"}\n    with yt_dlp.YoutubeDL(ydl_opts) as ydl:\n        info_dict = ydl.extract_info(video_url, download=False)\n        return info_dict\ndef ytsearch(kw: str):\n    results = YoutubeSearch(kw, max_results=5).to_json()\n    return json.loads(results)\n@app.route(\"/\")\ndef home():",
        "detail": "src.server.main",
        "documentation": {}
    },
    {
        "label": "ytsearch",
        "kind": 2,
        "importPath": "src.server.main",
        "description": "src.server.main",
        "peekOfCode": "def ytsearch(kw: str):\n    results = YoutubeSearch(kw, max_results=5).to_json()\n    return json.loads(results)\n@app.route(\"/\")\ndef home():\n    return jsonify(page=\"home\")\n@app.route(\"/search\")\ndef yt_search():\n    keyword = request.args.get(\"kw\")\n    if keyword:",
        "detail": "src.server.main",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "src.server.main",
        "description": "src.server.main",
        "peekOfCode": "def home():\n    return jsonify(page=\"home\")\n@app.route(\"/search\")\ndef yt_search():\n    keyword = request.args.get(\"kw\")\n    if keyword:\n        return jsonify(ytsearch(keyword))\n    else:\n        return jsonify(status=\"error\", message=\"no keyword to search\")\n@app.route(\"/get\")",
        "detail": "src.server.main",
        "documentation": {}
    },
    {
        "label": "yt_search",
        "kind": 2,
        "importPath": "src.server.main",
        "description": "src.server.main",
        "peekOfCode": "def yt_search():\n    keyword = request.args.get(\"kw\")\n    if keyword:\n        return jsonify(ytsearch(keyword))\n    else:\n        return jsonify(status=\"error\", message=\"no keyword to search\")\n@app.route(\"/get\")\ndef get_music():\n    url = request.args.get(\"url\")\n    info = music(url)",
        "detail": "src.server.main",
        "documentation": {}
    },
    {
        "label": "get_music",
        "kind": 2,
        "importPath": "src.server.main",
        "description": "src.server.main",
        "peekOfCode": "def get_music():\n    url = request.args.get(\"url\")\n    info = music(url)\n    return jsonify(\n        url=info[\"url\"],\n        name=info[\"title\"],\n        artist=info.get(\"channel\"),\n        cover=info.get(\"thumbnail\"),\n    )\n@app.route(\"/add\")",
        "detail": "src.server.main",
        "documentation": {}
    },
    {
        "label": "update_album",
        "kind": 2,
        "importPath": "src.server.main",
        "description": "src.server.main",
        "peekOfCode": "def update_album():\n    dl_url = request.args.get(\"dl\")\n    url = request.args.get(\"url\")\n    name = request.args.get(\"name\")\n    artist = request.args.get(\"artist\")\n    cover = request.args.get(\"cover\")\n    song = Song(key=url, name=name, artist=artist, url=url, cover=cover)\n    data = requests.get(dl_url).content\n    file = File(name=name, data=data)\n    drive.put_file(file)",
        "detail": "src.server.main",
        "documentation": {}
    },
    {
        "label": "get_album",
        "kind": 2,
        "importPath": "src.server.main",
        "description": "src.server.main",
        "peekOfCode": "def get_album():\n    result = db.fetch().items\n    return jsonify(result)\n@app.route(\"/delete\")\ndef delete_music():\n    key = request.args.get(\"name\")\n    db.delete(key)\n    return jsonify(status=\"success\")",
        "detail": "src.server.main",
        "documentation": {}
    },
    {
        "label": "delete_music",
        "kind": 2,
        "importPath": "src.server.main",
        "description": "src.server.main",
        "peekOfCode": "def delete_music():\n    key = request.args.get(\"name\")\n    db.delete(key)\n    return jsonify(status=\"success\")",
        "detail": "src.server.main",
        "documentation": {}
    },
    {
        "label": "deta",
        "kind": 5,
        "importPath": "src.server.main",
        "description": "src.server.main",
        "peekOfCode": "deta = Deta(\"c0kEEGmHJte_YjH9AKDzdmP4tm6Zyge3Fme9KyMRNwXB\")\ndb = deta.Base(\"web-music\")\ndrive = deta.Drive(\"web-music\")\napp = Flask(__name__)\nCORS(app)\ndef music(video_url):\n    ydl_opts = {\"format\": \"bestaudio/best\"}\n    with yt_dlp.YoutubeDL(ydl_opts) as ydl:\n        info_dict = ydl.extract_info(video_url, download=False)\n        return info_dict",
        "detail": "src.server.main",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "src.server.main",
        "description": "src.server.main",
        "peekOfCode": "db = deta.Base(\"web-music\")\ndrive = deta.Drive(\"web-music\")\napp = Flask(__name__)\nCORS(app)\ndef music(video_url):\n    ydl_opts = {\"format\": \"bestaudio/best\"}\n    with yt_dlp.YoutubeDL(ydl_opts) as ydl:\n        info_dict = ydl.extract_info(video_url, download=False)\n        return info_dict\ndef ytsearch(kw: str):",
        "detail": "src.server.main",
        "documentation": {}
    },
    {
        "label": "drive",
        "kind": 5,
        "importPath": "src.server.main",
        "description": "src.server.main",
        "peekOfCode": "drive = deta.Drive(\"web-music\")\napp = Flask(__name__)\nCORS(app)\ndef music(video_url):\n    ydl_opts = {\"format\": \"bestaudio/best\"}\n    with yt_dlp.YoutubeDL(ydl_opts) as ydl:\n        info_dict = ydl.extract_info(video_url, download=False)\n        return info_dict\ndef ytsearch(kw: str):\n    results = YoutubeSearch(kw, max_results=5).to_json()",
        "detail": "src.server.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "src.server.main",
        "description": "src.server.main",
        "peekOfCode": "app = Flask(__name__)\nCORS(app)\ndef music(video_url):\n    ydl_opts = {\"format\": \"bestaudio/best\"}\n    with yt_dlp.YoutubeDL(ydl_opts) as ydl:\n        info_dict = ydl.extract_info(video_url, download=False)\n        return info_dict\ndef ytsearch(kw: str):\n    results = YoutubeSearch(kw, max_results=5).to_json()\n    return json.loads(results)",
        "detail": "src.server.main",
        "documentation": {}
    },
    {
        "label": "results",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "results = YoutubeSearch(\"nguoi la oi\", max_results=1).to_json()\nwith open(\"result.json\", \"w\") as f:\n    json.dump(json.loads(results), f)",
        "detail": "test",
        "documentation": {}
    }
]