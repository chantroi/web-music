[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "concurrent.futures",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "HTMX",
        "importPath": "flask_htmx",
        "description": "flask_htmx",
        "isExtraImport": true,
        "detail": "flask_htmx",
        "documentation": {}
    },
    {
        "label": "yt_dlp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yt_dlp",
        "description": "yt_dlp",
        "detail": "yt_dlp",
        "documentation": {}
    },
    {
        "label": "Deta",
        "importPath": "deta",
        "description": "deta",
        "isExtraImport": true,
        "detail": "deta",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "detastore",
        "description": "detastore",
        "isExtraImport": true,
        "detail": "detastore",
        "documentation": {}
    },
    {
        "label": "Drive",
        "importPath": "detastore",
        "description": "detastore",
        "isExtraImport": true,
        "detail": "detastore",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "AlbumDB",
        "kind": 6,
        "importPath": "src.db.client",
        "description": "src.db.client",
        "peekOfCode": "class AlbumDB:\n    def __init__(self) -> None:\n        db_url = os.environ[\"DB_URL\"]\n        engine = create_engine(db_url)\n        Base.metadata.create_all(engine)\n        Session = sessionmaker(bind=engine)\n        self.session = Session()\n    def add(self, song: Song) -> dict:\n        self.session.merge(song)\n        self.session.commit()",
        "detail": "src.db.client",
        "documentation": {}
    },
    {
        "label": "Song",
        "kind": 6,
        "importPath": "src.db.model",
        "description": "src.db.model",
        "peekOfCode": "class Song(Base):\n    __tablename__ = \"songs\"\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    name = Column(String)\n    artist = Column(String, nullable=True)\n    url = Column(String)\n    origin = Column(String)\n    cover = Column(String, nullable=True)\n    album = Column(String, default=\"common\")\n    def json(self) -> dict:",
        "detail": "src.db.model",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "src.db.model",
        "description": "src.db.model",
        "peekOfCode": "Base = declarative_base()\nclass Song(Base):\n    __tablename__ = \"songs\"\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    name = Column(String)\n    artist = Column(String, nullable=True)\n    url = Column(String)\n    origin = Column(String)\n    cover = Column(String, nullable=True)\n    album = Column(String, default=\"common\")",
        "detail": "src.db.model",
        "documentation": {}
    },
    {
        "label": "Drive",
        "kind": 6,
        "importPath": "src.drive.client",
        "description": "src.drive.client",
        "peekOfCode": "class Drive:\n    def __init__(self) -> None:\n        self.url = os.environ[\"DRIVE\"]\n    def get(self, album: str = \"common\") -> str:\n        req = requests.get(self.url, params={\"album\": album}, timeout=20)\n        res = req.json()\n        return res[\"list\"]\n    def put(self, file: dict) -> None:\n        requests.post(self.url, json=file, timeout=20)\n    def delete(self, filename: str) -> None:",
        "detail": "src.drive.client",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "src.app",
        "description": "src.app",
        "peekOfCode": "def home(album=\"common\"):\n    return render_template(\"index.html\", album=album)\n@app.route(\"/list\")\ndef list_():\n    album = request.args.get(\"album\")\n    pre = None\n    songs = []\n    if album and album != \"common\":\n        pre = db.list(album)\n    else:",
        "detail": "src.app",
        "documentation": {}
    },
    {
        "label": "list_",
        "kind": 2,
        "importPath": "src.app",
        "description": "src.app",
        "peekOfCode": "def list_():\n    album = request.args.get(\"album\")\n    pre = None\n    songs = []\n    if album and album != \"common\":\n        pre = db.list(album)\n    else:\n        pre = db.list()\n    if pre:\n        for song in pre:",
        "detail": "src.app",
        "documentation": {}
    },
    {
        "label": "add_song",
        "kind": 2,
        "importPath": "src.app",
        "description": "src.app",
        "peekOfCode": "def add_song():\n    origin = request.args.get(\"url\")\n    album = request.args.get(\"album\")\n    if not origin:\n        return jsonify(err=\"no url\")\n    info = music(origin)\n    url = info[\"url\"]\n    name = info[\"title\"]\n    artist = info.get(\"channel\")\n    cover = info.get(\"thumbnail\")",
        "detail": "src.app",
        "documentation": {}
    },
    {
        "label": "delete_song",
        "kind": 2,
        "importPath": "src.app",
        "description": "src.app",
        "peekOfCode": "def delete_song():\n    song_id = request.args.get(\"id\")",
        "detail": "src.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "src.app",
        "description": "src.app",
        "peekOfCode": "app = Flask(__name__)\nHTMX(app)\ndb = AlbumDB()\n@app.route(\"/\")\n@app.route(\"/<album>\")\ndef home(album=\"common\"):\n    return render_template(\"index.html\", album=album)\n@app.route(\"/list\")\ndef list_():\n    album = request.args.get(\"album\")",
        "detail": "src.app",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "src.app",
        "description": "src.app",
        "peekOfCode": "db = AlbumDB()\n@app.route(\"/\")\n@app.route(\"/<album>\")\ndef home(album=\"common\"):\n    return render_template(\"index.html\", album=album)\n@app.route(\"/list\")\ndef list_():\n    album = request.args.get(\"album\")\n    pre = None\n    songs = []",
        "detail": "src.app",
        "documentation": {}
    },
    {
        "label": "music",
        "kind": 2,
        "importPath": "src.ytdl",
        "description": "src.ytdl",
        "peekOfCode": "def music(video_url):\n    ydl_opts = {\"format\": \"bestaudio/best\"}\n    with yt_dlp.YoutubeDL(ydl_opts) as ydl:\n        info_dict = ydl.extract_info(video_url, download=False)\n        return info_dict",
        "detail": "src.ytdl",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "src-v2.server.detastore.base",
        "description": "src-v2.server.detastore.base",
        "peekOfCode": "class Base:\n    def __init__(self, album: str = \"common\"):\n        self.album = album\n        self.b = deta.Base(\"music\")\n    def put(\n        self,\n        filename: str,\n        artist: str = None,\n        cover: str = None,\n    ) -> None:",
        "detail": "src-v2.server.detastore.base",
        "documentation": {}
    },
    {
        "label": "deta",
        "kind": 5,
        "importPath": "src-v2.server.detastore.client",
        "description": "src-v2.server.detastore.client",
        "peekOfCode": "deta = Deta(os.environ[\"DETA_KEY\"])",
        "detail": "src-v2.server.detastore.client",
        "documentation": {}
    },
    {
        "label": "Drive",
        "kind": 6,
        "importPath": "src-v2.server.detastore.drive",
        "description": "src-v2.server.detastore.drive",
        "peekOfCode": "class Drive:\n    def __init__(self) -> None:\n        self.d = deta.Drive(\"music\")\n    def put(self, filename: str, data: bytes):\n        if self.get(filename):\n            return\n        self.d.put(filename, data, content_type=\"audio/mpeg\")\n    def get(self, filename: str):\n        file = self.d.get(filename)\n        if file:",
        "detail": "src-v2.server.detastore.drive",
        "documentation": {}
    },
    {
        "label": "music",
        "kind": 2,
        "importPath": "src-v2.server.main",
        "description": "src-v2.server.main",
        "peekOfCode": "def music(video_url):\n    ydl_opts = {\"format\": \"bestaudio/best\"}\n    with yt_dlp.YoutubeDL(ydl_opts) as ydl:\n        info_dict = ydl.extract_info(video_url, download=False)\n        return info_dict\ndef get_bytes(url: str) -> bytes:\n    return requests.get(url, timeout=20).content\n@app.route(\"/\")\ndef home():\n    return jsonify(page=\"home\")",
        "detail": "src-v2.server.main",
        "documentation": {}
    },
    {
        "label": "get_bytes",
        "kind": 2,
        "importPath": "src-v2.server.main",
        "description": "src-v2.server.main",
        "peekOfCode": "def get_bytes(url: str) -> bytes:\n    return requests.get(url, timeout=20).content\n@app.route(\"/\")\ndef home():\n    return jsonify(page=\"home\")\n@app.route(\"/put\")\ndef put_music():\n    origin = request.args.get(\"url\")\n    album = request.args.get(\"album\", \"common\")\n    info = music(origin)",
        "detail": "src-v2.server.main",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "src-v2.server.main",
        "description": "src-v2.server.main",
        "peekOfCode": "def home():\n    return jsonify(page=\"home\")\n@app.route(\"/put\")\ndef put_music():\n    origin = request.args.get(\"url\")\n    album = request.args.get(\"album\", \"common\")\n    info = music(origin)\n    url = info[\"url\"]\n    name = info[\"title\"]\n    artist = info.get(\"channel\")",
        "detail": "src-v2.server.main",
        "documentation": {}
    },
    {
        "label": "put_music",
        "kind": 2,
        "importPath": "src-v2.server.main",
        "description": "src-v2.server.main",
        "peekOfCode": "def put_music():\n    origin = request.args.get(\"url\")\n    album = request.args.get(\"album\", \"common\")\n    info = music(origin)\n    url = info[\"url\"]\n    name = info[\"title\"]\n    artist = info.get(\"channel\")\n    cover = info.get(\"thumbnail\")\n    data = get_bytes(url)\n    base = Base(album=album)",
        "detail": "src-v2.server.main",
        "documentation": {}
    },
    {
        "label": "get_album",
        "kind": 2,
        "importPath": "src-v2.server.main",
        "description": "src-v2.server.main",
        "peekOfCode": "def get_album():\n    album = request.args.get(\"album\", \"common\")\n    app_url = request.url\n    base = Base(album=album)\n    songs = []\n    for song in base.list():\n        url = f\"{app_url}/play/{song['name']}\"\n        song = {\n            \"name\": song[\"name\"],\n            \"artist\": song[\"artist\"],",
        "detail": "src-v2.server.main",
        "documentation": {}
    },
    {
        "label": "play_music",
        "kind": 2,
        "importPath": "src-v2.server.main",
        "description": "src-v2.server.main",
        "peekOfCode": "def play_music(songname):\n    drive = Drive()\n    data = drive.get(songname)\n    return Response(data, content_type=\"audio/mpeg\")\n@app.route(\"/delete\")\ndef delete_music():\n    songname = request.args.get(\"name\")\n    album = request.args.get(\"album\")\n    base = Base(album)\n    base.delete(songname)",
        "detail": "src-v2.server.main",
        "documentation": {}
    },
    {
        "label": "delete_music",
        "kind": 2,
        "importPath": "src-v2.server.main",
        "description": "src-v2.server.main",
        "peekOfCode": "def delete_music():\n    songname = request.args.get(\"name\")\n    album = request.args.get(\"album\")\n    base = Base(album)\n    base.delete(songname)\n    return jsonify(status=\"success\")\nif __name__ == \"__main__\":\n    app.run(port=8080)",
        "detail": "src-v2.server.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "src-v2.server.main",
        "description": "src-v2.server.main",
        "peekOfCode": "app = Flask(__name__)\nCORS(app)\ndef music(video_url):\n    ydl_opts = {\"format\": \"bestaudio/best\"}\n    with yt_dlp.YoutubeDL(ydl_opts) as ydl:\n        info_dict = ydl.extract_info(video_url, download=False)\n        return info_dict\ndef get_bytes(url: str) -> bytes:\n    return requests.get(url, timeout=20).content\n@app.route(\"/\")",
        "detail": "src-v2.server.main",
        "documentation": {}
    },
    {
        "label": "Author",
        "kind": 6,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "class Author(Base):\n    __tablename__ = \"authors\"\n    id = Column(Integer, primary_key=True)\n    name = Column(String, nullable=False)\n    books = relationship(\"Book\", back_populates=\"author\")\nclass Book(Base):\n    __tablename__ = \"books\"\n    id = Column(Integer, primary_key=True)\n    title = Column(String, nullable=False)\n    author_id = Column(Integer, ForeignKey(\"authors.id\"))",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "Book",
        "kind": 6,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "class Book(Base):\n    __tablename__ = \"books\"\n    id = Column(Integer, primary_key=True)\n    title = Column(String, nullable=False)\n    author_id = Column(Integer, ForeignKey(\"authors.id\"))\n    author = relationship(\"Author\", back_populates=\"books\")\nclass Database:\n    def __init__(self) -> None:\n        engine = create_engine(\"sqlite:///library.db\", echo=True)\n        Base.metadata.create_all(engine)",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "Database",
        "kind": 6,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "class Database:\n    def __init__(self) -> None:\n        engine = create_engine(\"sqlite:///library.db\", echo=True)\n        Base.metadata.create_all(engine)\n        Session = sessionmaker(bind=engine)\n        self.session = Session()\n    def add_author(self, name: str) -> Author:\n        new_author = Author(name=name)\n        self.session.add(new_author)\n        self.session.commit()",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "Base = declarative_base()\nclass Author(Base):\n    __tablename__ = \"authors\"\n    id = Column(Integer, primary_key=True)\n    name = Column(String, nullable=False)\n    books = relationship(\"Book\", back_populates=\"author\")\nclass Book(Base):\n    __tablename__ = \"books\"\n    id = Column(Integer, primary_key=True)\n    title = Column(String, nullable=False)",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "db = Database()\nfor v in db.get_books():\n    print(v)",
        "detail": "test",
        "documentation": {}
    }
]